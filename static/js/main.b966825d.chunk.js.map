{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,kBAAO,SAAAC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,MAAnB,YCHKC,EAAW,SAAAR,GAEpB,OAAO,qBAAKC,UAAU,YAAf,SACDD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJpBM,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAEnC,OAAQ,uBAAOZ,UAAU,SAASa,KAAK,SACvCF,YAAaA,EACbG,SAAUF,MCwCCG,E,kDAzCb,aAAc,IAAD,8BACX,gBACKC,MAAO,CACVR,SAAU,GACVS,YAAY,IAJH,E,gEASO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,+BAIhC,IAAD,OACN,GAAGE,KAAKR,MAAMR,SACd,CAAC,IAAD,EACiCgB,KAAKR,MAA7BR,EADT,EACSA,SAASS,EADlB,EACkBA,YACVQ,EAAiBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC1CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEpD,OACE,sBAAK3B,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,6BACD,cAAC,EAAD,CACCW,YAAY,kBACZC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,QAAO,WAC9DC,QAAQC,IAAI,EAAKjB,aAGnB,cAAC,EAAD,CAAUR,SAAUiB,Y,GAlCZS,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b966825d.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nexport const Card = props => {\n   return <div className=\"card-container\">\n       <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h1> {props.monster.name}</h1>\n        <p> {props.monster.email} </p>\n    </div>\n}","import React from 'react'\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\nexport const CardList = props => {\n    // console.log(props);\n    return <div className=\"card-list\">\n         {props.monsters.map(monster => (\n              <Card key={monster.id} monster={monster}/>\n        ))}\n        </div>\n}","import React from 'react'\nimport './searchbox.styles.css';\n\nexport const SearchBox = ({placeholder,handleChange}) => {\n\n    return  <input className=\"search\" type='search' \n    placeholder={placeholder} \n    onChange={handleChange} />\n\n}","import './App.css';\nimport React,{ Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/searchbox/searchbox.components';\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state ={ \n      monsters: [],\n      searchField:''\n      \n    };\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n\n  }\n\n  render(){\n    if(this.state.monsters)\n    {\n      const {monsters,searchField} = this.state;\n      const filterMonsters = monsters.filter(monster =>\n          monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n      return (\n        <div className='App'>\n          <h1 className='headtitle'>Monster Rolodex</h1>\n         <SearchBox\n          placeholder=\"search Monsters\"\n          handleChange ={ e => this.setState({searchField:e.target.value},() => {\n            console.log(this.state);\n          })}\n           ></SearchBox>   \n          <CardList monsters={filterMonsters}/>\n        </div>\n\n      );\n    }\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}